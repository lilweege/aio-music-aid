#! /usr/bin/env python
#  -*- coding: utf-8 -*-

'''
Description: LUQ MetroTuner Pro - All-In-One music aid/practice tool: Python gui code with tkinter on rpi
Course Code: TER4M
Submitted by: Luigi Quattrociocchi & Umberto Quattrociocchi
Submitted to: Mr. Kolch
Date Submitted: January 19th, 2020
'''

# import system, common in most python scripts
import sys

# check python version
try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

# use support script
import music_aid_support


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    # manually changed variable, decides whether or not to only boot when arduino serial
    # only False for gui testing purposes, no functionality if no arduino is plugged in
    checkArduino = True
    if music_aid_support.ser or not checkArduino:
        global val, w, root
        root = tk.Tk()
        music_aid_support.set_Tk_var()
        top = Toplevel1 (root)
        music_aid_support.init(root, top)
        root.bind("<Escape>", lambda e: root.destroy())
        root.config(cursor="none")
        root.attributes('-fullscreen', True)
        root.mainloop()
    else:
        print("no arduino")

# create tkinter gui toplevel window, specific to this gui (refer to music_aid_support.py)
# w (window) starts as nothing (global)
w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    music_aid_support.set_Tk_var()
    top = Toplevel1 (w)
    music_aid_support.init(w, top, *args, **kwargs)
    return (w, top)

# destroy specific gui window toplevel
def destroy_Toplevel1():
    global w
    w.destroy()
    w = None
'''
class of our gui interface
this contains all of the elements, commands, and some specific functions for calling other commands
the class is similar to the windows designer form in visual C#, which is also generated by a drag/drop interface
most of the TopLevel1 class was generated by the PAGE tkinter generator program
the toplevel class refers to it's own window using 'self', rather than 'this' in C# and othe langs
class refers to elements using dot notation, as the toplevel contains its own children as objects
'''
class Toplevel1:
    # initting function for the gui
    # declare some commonly used variables
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

#        top.geometry("1024x600")
        # size gui window according to based on built in variables in python
        top.geometry("{0}x{1}+0+0".format(root.winfo_screenwidth(), root.winfo_screenheight()))
        top.minsize(148, 1)
        top.maxsize(1905, 1050)
        top.resizable(1, 1)
        top.title("Title not meant to be visible in final product fullscreen mode")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")
        
        self.style.configure('TNotebook.Tab', background=_bgcolor)
        self.style.configure('TNotebook.Tab', foreground=_fgcolor)
        self.style.map('TNotebook.Tab', background=
            [('selected', _compcolor), ('active',_ana2color)])
        self.TNotebookMode = ttk.Notebook(top)
        self.TNotebookMode.place(relx=0.013, rely=0.165, relheight=0.818
                , relwidth=0.835)
        self.TNotebookMode.configure(takefocus="")
        self.TNotebookMode_t0 = tk.Frame(self.TNotebookMode)
        self.TNotebookMode.add(self.TNotebookMode_t0, padding=3)
        self.TNotebookMode.tab(0, text="Metronome", compound="left"
                ,underline="-1", )
        self.TNotebookMode_t0.configure(background="#d9d9d9")
        self.TNotebookMode_t0.configure(highlightbackground="#d9d9d9")
        self.TNotebookMode_t0.configure(highlightcolor="black")
        self.TNotebookMode_t1 = tk.Frame(self.TNotebookMode)
        self.TNotebookMode.add(self.TNotebookMode_t1, padding=3)
        self.TNotebookMode.tab(1, text="Tuner",compound="left",underline="-1",)
        self.TNotebookMode_t1.configure(background="#d9d9d9")
        self.TNotebookMode_t1.configure(highlightbackground="#d9d9d9")
        self.TNotebookMode_t1.configure(highlightcolor="black")
        self.TNotebookMode_t2 = tk.Frame(self.TNotebookMode)
        self.TNotebookMode.add(self.TNotebookMode_t2, padding=3)
        self.TNotebookMode.tab(2, text="Drone",compound="none",underline="-1",)
        self.TNotebookMode_t2.configure(background="#d9d9d9")
        self.TNotebookMode_t2.configure(highlightbackground="#d9d9d9")
        self.TNotebookMode_t2.configure(highlightcolor="black")

        self.LabelMetronomeInstructions = tk.Label(self.TNotebookMode_t0)
        self.LabelMetronomeInstructions.place(relx=0.046, rely=0.043, height=31
                , width=609)
        self.LabelMetronomeInstructions.configure(activebackground="#f9f9f9")
        self.LabelMetronomeInstructions.configure(activeforeground="black")
        self.LabelMetronomeInstructions.configure(background="#d9d9d9")
        self.LabelMetronomeInstructions.configure(disabledforeground="#a3a3a3")
        self.LabelMetronomeInstructions.configure(foreground="#000000")
        self.LabelMetronomeInstructions.configure(highlightbackground="#d9d9d9")
        self.LabelMetronomeInstructions.configure(highlightcolor="black")
        self.LabelMetronomeInstructions.configure(text='''Increase or decrease BPM, enter a desired BPM.''')

        self.ButtonStartStopMetronome = tk.Button(self.TNotebookMode_t0)
        self.ButtonStartStopMetronome.place(relx=0.076, rely=0.796, height=71
                , width=201)
        self.ButtonStartStopMetronome.configure(activebackground="#f9f9f9")
        self.ButtonStartStopMetronome.configure(activeforeground="black")
        self.ButtonStartStopMetronome.configure(background="#d9d9d9")
        self.ButtonStartStopMetronome.configure(disabledforeground="#a3a3a3")
        self.ButtonStartStopMetronome.configure(foreground="#000000")
        self.ButtonStartStopMetronome.configure(highlightbackground="#d9d9d9")
        self.ButtonStartStopMetronome.configure(highlightcolor="black")
        self.ButtonStartStopMetronome.configure(pady="0")
        self.ButtonStartStopMetronome.configure(text='''Start''')

        self.TextEnterBPM = tk.Text(self.TNotebookMode_t0)
        self.TextEnterBPM.place(relx=0.471, rely=0.129, relheight=0.052
                , relwidth=0.252)
        self.TextEnterBPM.configure(background="white")
        self.TextEnterBPM.configure(font="TkTextFont")
        self.TextEnterBPM.configure(foreground="black")
        self.TextEnterBPM.configure(highlightbackground="#d9d9d9")
        self.TextEnterBPM.configure(highlightcolor="black")
        self.TextEnterBPM.configure(insertbackground="black")
        self.TextEnterBPM.configure(selectbackground="#c4c4c4")
        self.TextEnterBPM.configure(selectforeground="black")
        self.TextEnterBPM.configure(wrap="word")

        self.FrameEnterBPM = tk.Frame(self.TNotebookMode_t0)
        self.FrameEnterBPM.place(relx=0.334, rely=0.194, relheight=0.57
                , relwidth=0.524)
        self.FrameEnterBPM.configure(relief='groove')
        self.FrameEnterBPM.configure(borderwidth="2")
        self.FrameEnterBPM.configure(relief="groove")
        self.FrameEnterBPM.configure(background="#d9d9d9")
        self.FrameEnterBPM.configure(highlightbackground="#d9d9d9")
        self.FrameEnterBPM.configure(highlightcolor="black")

        self.ButtonEnterBPM1 = tk.Button(self.FrameEnterBPM)
        self.ButtonEnterBPM1.place(relx=0.058, rely=0.075, height=71, width=71)
        self.ButtonEnterBPM1.configure(activebackground="#f9f9f9")
        self.ButtonEnterBPM1.configure(activeforeground="black")
        self.ButtonEnterBPM1.configure(background="#d9d9d9")
        self.ButtonEnterBPM1.configure(disabledforeground="#a3a3a3")
        self.ButtonEnterBPM1.configure(foreground="#000000")
        self.ButtonEnterBPM1.configure(highlightbackground="#d9d9d9")
        self.ButtonEnterBPM1.configure(highlightcolor="black")
        self.ButtonEnterBPM1.configure(pady="0")
        self.ButtonEnterBPM1.configure(text='''1''')

        self.ButtonEnterBPM2 = tk.Button(self.FrameEnterBPM)
        self.ButtonEnterBPM2.place(relx=0.29, rely=0.075, height=71, width=71)
        self.ButtonEnterBPM2.configure(activebackground="#f9f9f9")
        self.ButtonEnterBPM2.configure(activeforeground="black")
        self.ButtonEnterBPM2.configure(background="#d9d9d9")
        self.ButtonEnterBPM2.configure(disabledforeground="#a3a3a3")
        self.ButtonEnterBPM2.configure(foreground="#000000")
        self.ButtonEnterBPM2.configure(highlightbackground="#d9d9d9")
        self.ButtonEnterBPM2.configure(highlightcolor="black")
        self.ButtonEnterBPM2.configure(pady="0")
        self.ButtonEnterBPM2.configure(text='''2''')

        self.ButtonEnterBPM3 = tk.Button(self.FrameEnterBPM)
        self.ButtonEnterBPM3.place(relx=0.522, rely=0.075, height=71, width=71)
        self.ButtonEnterBPM3.configure(activebackground="#f9f9f9")
        self.ButtonEnterBPM3.configure(activeforeground="black")
        self.ButtonEnterBPM3.configure(background="#d9d9d9")
        self.ButtonEnterBPM3.configure(disabledforeground="#a3a3a3")
        self.ButtonEnterBPM3.configure(foreground="#000000")
        self.ButtonEnterBPM3.configure(highlightbackground="#d9d9d9")
        self.ButtonEnterBPM3.configure(highlightcolor="black")
        self.ButtonEnterBPM3.configure(pady="0")
        self.ButtonEnterBPM3.configure(text='''3''')

        self.ButtonEnterBPM4 = tk.Button(self.FrameEnterBPM)
        self.ButtonEnterBPM4.place(relx=0.058, rely=0.377, height=71, width=71)
        self.ButtonEnterBPM4.configure(activebackground="#f9f9f9")
        self.ButtonEnterBPM4.configure(activeforeground="black")
        self.ButtonEnterBPM4.configure(background="#d9d9d9")
        self.ButtonEnterBPM4.configure(disabledforeground="#a3a3a3")
        self.ButtonEnterBPM4.configure(foreground="#000000")
        self.ButtonEnterBPM4.configure(highlightbackground="#d9d9d9")
        self.ButtonEnterBPM4.configure(highlightcolor="black")
        self.ButtonEnterBPM4.configure(pady="0")
        self.ButtonEnterBPM4.configure(text='''4''')

        self.ButtonEnterBPM5 = tk.Button(self.FrameEnterBPM)
        self.ButtonEnterBPM5.place(relx=0.29, rely=0.377, height=71, width=71)
        self.ButtonEnterBPM5.configure(activebackground="#f9f9f9")
        self.ButtonEnterBPM5.configure(activeforeground="black")
        self.ButtonEnterBPM5.configure(background="#d9d9d9")
        self.ButtonEnterBPM5.configure(disabledforeground="#a3a3a3")
        self.ButtonEnterBPM5.configure(foreground="#000000")
        self.ButtonEnterBPM5.configure(highlightbackground="#d9d9d9")
        self.ButtonEnterBPM5.configure(highlightcolor="black")
        self.ButtonEnterBPM5.configure(pady="0")
        self.ButtonEnterBPM5.configure(text='''5''')

        self.ButtonEnterBPM6 = tk.Button(self.FrameEnterBPM)
        self.ButtonEnterBPM6.place(relx=0.522, rely=0.377, height=71, width=71)
        self.ButtonEnterBPM6.configure(activebackground="#f9f9f9")
        self.ButtonEnterBPM6.configure(activeforeground="black")
        self.ButtonEnterBPM6.configure(background="#d9d9d9")
        self.ButtonEnterBPM6.configure(disabledforeground="#a3a3a3")
        self.ButtonEnterBPM6.configure(foreground="#000000")
        self.ButtonEnterBPM6.configure(highlightbackground="#d9d9d9")
        self.ButtonEnterBPM6.configure(highlightcolor="black")
        self.ButtonEnterBPM6.configure(pady="0")
        self.ButtonEnterBPM6.configure(text='''6''')

        self.ButtonEnterBPM7 = tk.Button(self.FrameEnterBPM)
        self.ButtonEnterBPM7.place(relx=0.058, rely=0.679, height=71, width=71)
        self.ButtonEnterBPM7.configure(activebackground="#f9f9f9")
        self.ButtonEnterBPM7.configure(activeforeground="black")
        self.ButtonEnterBPM7.configure(background="#d9d9d9")
        self.ButtonEnterBPM7.configure(disabledforeground="#a3a3a3")
        self.ButtonEnterBPM7.configure(foreground="#000000")
        self.ButtonEnterBPM7.configure(highlightbackground="#d9d9d9")
        self.ButtonEnterBPM7.configure(highlightcolor="black")
        self.ButtonEnterBPM7.configure(pady="0")
        self.ButtonEnterBPM7.configure(text='''7''')

        self.ButtonEnterBPM8 = tk.Button(self.FrameEnterBPM)
        self.ButtonEnterBPM8.place(relx=0.29, rely=0.679, height=71, width=71)
        self.ButtonEnterBPM8.configure(activebackground="#f9f9f9")
        self.ButtonEnterBPM8.configure(activeforeground="black")
        self.ButtonEnterBPM8.configure(background="#d9d9d9")
        self.ButtonEnterBPM8.configure(disabledforeground="#a3a3a3")
        self.ButtonEnterBPM8.configure(foreground="#000000")
        self.ButtonEnterBPM8.configure(highlightbackground="#d9d9d9")
        self.ButtonEnterBPM8.configure(highlightcolor="black")
        self.ButtonEnterBPM8.configure(pady="0")
        self.ButtonEnterBPM8.configure(text='''8''')

        self.ButtonEnterBPM9 = tk.Button(self.FrameEnterBPM)
        self.ButtonEnterBPM9.place(relx=0.522, rely=0.679, height=71, width=71)
        self.ButtonEnterBPM9.configure(activebackground="#f9f9f9")
        self.ButtonEnterBPM9.configure(activeforeground="black")
        self.ButtonEnterBPM9.configure(background="#d9d9d9")
        self.ButtonEnterBPM9.configure(disabledforeground="#a3a3a3")
        self.ButtonEnterBPM9.configure(foreground="#000000")
        self.ButtonEnterBPM9.configure(highlightbackground="#d9d9d9")
        self.ButtonEnterBPM9.configure(highlightcolor="black")
        self.ButtonEnterBPM9.configure(pady="0")
        self.ButtonEnterBPM9.configure(text='''9''')

        self.ButtonEnterBPM0 = tk.Button(self.FrameEnterBPM)
        self.ButtonEnterBPM0.place(relx=0.754, rely=0.075, height=71
                , width=71)
        self.ButtonEnterBPM0.configure(activebackground="#f9f9f9")
        self.ButtonEnterBPM0.configure(activeforeground="black")
        self.ButtonEnterBPM0.configure(background="#d9d9d9")
        self.ButtonEnterBPM0.configure(disabledforeground="#a3a3a3")
        self.ButtonEnterBPM0.configure(foreground="#000000")
        self.ButtonEnterBPM0.configure(highlightbackground="#d9d9d9")
        self.ButtonEnterBPM0.configure(highlightcolor="black")
        self.ButtonEnterBPM0.configure(pady="0")
        self.ButtonEnterBPM0.configure(text='''0''')

        self.ButtonEnterBPMDelete = tk.Button(self.FrameEnterBPM)
        self.ButtonEnterBPMDelete.place(relx=0.754, rely=0.377, height=71
                , width=71)
        self.ButtonEnterBPMDelete.configure(activebackground="#f9f9f9")
        self.ButtonEnterBPMDelete.configure(activeforeground="black")
        self.ButtonEnterBPMDelete.configure(background="#d9d9d9")
        self.ButtonEnterBPMDelete.configure(disabledforeground="#a3a3a3")
        self.ButtonEnterBPMDelete.configure(foreground="#000000")
        self.ButtonEnterBPMDelete.configure(highlightbackground="#d9d9d9")
        self.ButtonEnterBPMDelete.configure(highlightcolor="black")
        self.ButtonEnterBPMDelete.configure(pady="0")
        self.ButtonEnterBPMDelete.configure(text='''DEL''')

        self.ButtonEnterBPM = tk.Button(self.FrameEnterBPM)
        self.ButtonEnterBPM.place(relx=0.754, rely=0.679, height=71, width=71)
        self.ButtonEnterBPM.configure(activebackground="#f9f9f9")
        self.ButtonEnterBPM.configure(activeforeground="black")
        self.ButtonEnterBPM.configure(background="#d9d9d9")
        self.ButtonEnterBPM.configure(disabledforeground="#a3a3a3")
        self.ButtonEnterBPM.configure(foreground="#000000")
        self.ButtonEnterBPM.configure(highlightbackground="#d9d9d9")
        self.ButtonEnterBPM.configure(highlightcolor="black")
        self.ButtonEnterBPM.configure(pady="0")
        self.ButtonEnterBPM.configure(text='''ENTER''')

        self.ComboboxBeats = ttk.Combobox(self.TNotebookMode_t0)
        self.ComboboxBeats.place(relx=0.076, rely=0.194, relheight=0.045
                , relwidth=0.223)
        self.ComboboxBeats.configure(values = ['1/4', '1/3', '1/2', '1/1'])
        self.ComboboxBeats.configure(foreground="#000000")
        self.ComboboxBeats.configure(takefocus="")
        self.ComboboxBeats.current(0)

        self.FrameIncBPM = tk.Frame(self.TNotebookMode_t0)
        self.FrameIncBPM.place(relx=0.076, rely=0.28, relheight=0.484
                , relwidth=0.22)
        self.FrameIncBPM.configure(relief='groove')
        self.FrameIncBPM.configure(borderwidth="2")
        self.FrameIncBPM.configure(relief="groove")
        self.FrameIncBPM.configure(background="#d9d9d9")
        self.FrameIncBPM.configure(highlightbackground="#d9d9d9")
        self.FrameIncBPM.configure(highlightcolor="black")

        self.ButtonIncreaseBPM = tk.Button(self.FrameIncBPM)
        self.ButtonIncreaseBPM.place(relx=0.138, rely=0.044, height=61, width=99)

        self.ButtonIncreaseBPM.configure(activebackground="#f9f9f9")
        self.ButtonIncreaseBPM.configure(activeforeground="black")
        self.ButtonIncreaseBPM.configure(background="#d9d9d9")
        self.ButtonIncreaseBPM.configure(disabledforeground="#a3a3a3")
        self.ButtonIncreaseBPM.configure(foreground="#000000")
        self.ButtonIncreaseBPM.configure(highlightbackground="#d9d9d9")
        self.ButtonIncreaseBPM.configure(highlightcolor="black")
        self.ButtonIncreaseBPM.configure(pady="0")
        self.ButtonIncreaseBPM.configure(text='''↑''')

        self.LabelBPM = tk.Label(self.FrameIncBPM)
        self.LabelBPM.place(relx=0.069, rely=0.4, height=51, width=119)
        self.LabelBPM.configure(activebackground="#f9f9f9")
        self.LabelBPM.configure(activeforeground="black")
        self.LabelBPM.configure(background="#d9d9d9")
        self.LabelBPM.configure(disabledforeground="#a3a3a3")
        self.LabelBPM.configure(font="-family {DejaVu Sans} -size 20")
        self.LabelBPM.configure(foreground="#000000")
        self.LabelBPM.configure(highlightbackground="#d9d9d9")
        self.LabelBPM.configure(highlightcolor="black")
        self.LabelBPM.configure(text='''90 BPM''')
        self.LabelBPM.configure(textvariable=music_aid_support.bpm)

        self.ButtonDecreaseBPM = tk.Button(self.FrameIncBPM)
        self.ButtonDecreaseBPM.place(relx=0.138, rely=0.667, height=61, width=99)

        self.ButtonDecreaseBPM.configure(activebackground="#f9f9f9")
        self.ButtonDecreaseBPM.configure(activeforeground="black")
        self.ButtonDecreaseBPM.configure(background="#d9d9d9")
        self.ButtonDecreaseBPM.configure(disabledforeground="#a3a3a3")
        self.ButtonDecreaseBPM.configure(foreground="#000000")
        self.ButtonDecreaseBPM.configure(highlightbackground="#d9d9d9")
        self.ButtonDecreaseBPM.configure(highlightcolor="black")
        self.ButtonDecreaseBPM.configure(pady="0")
        self.ButtonDecreaseBPM.configure(text='''↓''')

        self.ButtonResetMetronome = tk.Button(self.TNotebookMode_t0)
        self.ButtonResetMetronome.place(relx=0.443, rely=0.796, height=73
                , width=266)
        self.ButtonResetMetronome.configure(activebackground="#ececec")
        self.ButtonResetMetronome.configure(activeforeground="#000000")
        self.ButtonResetMetronome.configure(background="#d9d9d9")
        self.ButtonResetMetronome.configure(disabledforeground="#a3a3a3")
        self.ButtonResetMetronome.configure(foreground="#000000")
        self.ButtonResetMetronome.configure(highlightbackground="#d9d9d9")
        self.ButtonResetMetronome.configure(highlightcolor="black")
        self.ButtonResetMetronome.configure(pady="0")
        self.ButtonResetMetronome.configure(text='''Reset''')

        self.ButtonStartStopTuner = tk.Button(self.TNotebookMode_t1)
        self.ButtonStartStopTuner.place(relx=0.015, rely=0.753, height=101
                , width=231)
        self.ButtonStartStopTuner.configure(activebackground="#f9f9f9")
        self.ButtonStartStopTuner.configure(activeforeground="black")
        self.ButtonStartStopTuner.configure(background="#d9d9d9")
        self.ButtonStartStopTuner.configure(disabledforeground="#a3a3a3")
        self.ButtonStartStopTuner.configure(foreground="#000000")
        self.ButtonStartStopTuner.configure(highlightbackground="#d9d9d9")
        self.ButtonStartStopTuner.configure(highlightcolor="black")
        self.ButtonStartStopTuner.configure(pady="0")
        self.ButtonStartStopTuner.configure(text='''Start''')

        self.LabelTunerInstructions = tk.Label(self.TNotebookMode_t1)
        self.LabelTunerInstructions.place(relx=0.03, rely=0.065, height=51
                , width=619)
        self.LabelTunerInstructions.configure(activebackground="#f9f9f9")
        self.LabelTunerInstructions.configure(activeforeground="black")
        self.LabelTunerInstructions.configure(background="#d9d9d9")
        self.LabelTunerInstructions.configure(disabledforeground="#a3a3a3")
        self.LabelTunerInstructions.configure(foreground="#000000")
        self.LabelTunerInstructions.configure(highlightbackground="#d9d9d9")
        self.LabelTunerInstructions.configure(highlightcolor="black")
        self.LabelTunerInstructions.configure(text='''Offset frequency and switch tuning modes''')

        self.ScaleTunerSharps = tk.Scale(self.TNotebookMode_t1, from_=1.0, to=0.0)
        self.ScaleTunerSharps.place(relx=0.152, rely=0.645, relwidth=0.101
                , relheight=0.0, height=23, bordermode='ignore')
        self.ScaleTunerSharps.configure(activebackground="#f9f9f9")
        self.ScaleTunerSharps.configure(background="#d9d9d9")
        self.ScaleTunerSharps.configure(foreground="#000000")
        self.ScaleTunerSharps.configure(highlightbackground="#d9d9d9")
        self.ScaleTunerSharps.configure(highlightcolor="black")
        self.ScaleTunerSharps.configure(orient="horizontal")
        self.ScaleTunerSharps.configure(showvalue="0")
        self.ScaleTunerSharps.configure(troughcolor="#d9d9d9")
        self.ScaleTunerSharps.set(1)

        self.FrameIncFrequency = tk.Frame(self.TNotebookMode_t1)
        self.FrameIncFrequency.place(relx=0.426, rely=0.473, relheight=0.497
                , relwidth=0.211)
        self.FrameIncFrequency.configure(relief='groove')
        self.FrameIncFrequency.configure(borderwidth="2")
        self.FrameIncFrequency.configure(relief="groove")
        self.FrameIncFrequency.configure(background="#d9d9d9")
        self.FrameIncFrequency.configure(highlightbackground="#d9d9d9")
        self.FrameIncFrequency.configure(highlightcolor="black")

        self.ButtonIncreaseFrequency = tk.Button(self.FrameIncFrequency)
        self.ButtonIncreaseFrequency.place(relx=0.144, rely=0.043, height=61
                , width=99)
        self.ButtonIncreaseFrequency.configure(activebackground="#f9f9f9")
        self.ButtonIncreaseFrequency.configure(activeforeground="black")
        self.ButtonIncreaseFrequency.configure(background="#d9d9d9")
        self.ButtonIncreaseFrequency.configure(disabledforeground="#a3a3a3")
        self.ButtonIncreaseFrequency.configure(foreground="#000000")
        self.ButtonIncreaseFrequency.configure(highlightbackground="#d9d9d9")
        self.ButtonIncreaseFrequency.configure(highlightcolor="black")
        self.ButtonIncreaseFrequency.configure(pady="0")
        self.ButtonIncreaseFrequency.configure(text='''↑''')

        self.LabelTunerFrequency = tk.Label(self.FrameIncFrequency)
        self.LabelTunerFrequency.place(relx=0.072, rely=0.39, height=51
                , width=119)
        self.LabelTunerFrequency.configure(activebackground="#f9f9f9")
        self.LabelTunerFrequency.configure(activeforeground="black")
        self.LabelTunerFrequency.configure(background="#d9d9d9")
        self.LabelTunerFrequency.configure(disabledforeground="#a3a3a3")
        self.LabelTunerFrequency.configure(font="-family {DejaVu Sans} -size 20")
        self.LabelTunerFrequency.configure(foreground="#000000")
        self.LabelTunerFrequency.configure(highlightbackground="#d9d9d9")
        self.LabelTunerFrequency.configure(highlightcolor="black")
        self.LabelTunerFrequency.configure(text='''440''')
        self.LabelTunerFrequency.configure(textvariable=music_aid_support.hz)

        self.ButtonDecreaseFrequency = tk.Button(self.FrameIncFrequency)
        self.ButtonDecreaseFrequency.place(relx=0.144, rely=0.649, height=61
                , width=99)
        self.ButtonDecreaseFrequency.configure(activebackground="#f9f9f9")
        self.ButtonDecreaseFrequency.configure(activeforeground="black")
        self.ButtonDecreaseFrequency.configure(background="#d9d9d9")
        self.ButtonDecreaseFrequency.configure(disabledforeground="#a3a3a3")
        self.ButtonDecreaseFrequency.configure(foreground="#000000")
        self.ButtonDecreaseFrequency.configure(highlightbackground="#d9d9d9")
        self.ButtonDecreaseFrequency.configure(highlightcolor="black")
        self.ButtonDecreaseFrequency.configure(pady="0")
        self.ButtonDecreaseFrequency.configure(text='''↓''')

        self.ButtonResetTuner = tk.Button(self.TNotebookMode_t1)
        self.ButtonResetTuner.place(relx=0.684, rely=0.753, height=103
                , width=146)
        self.ButtonResetTuner.configure(activebackground="#ececec")
        self.ButtonResetTuner.configure(activeforeground="#000000")
        self.ButtonResetTuner.configure(background="#d9d9d9")
        self.ButtonResetTuner.configure(disabledforeground="#a3a3a3")
        self.ButtonResetTuner.configure(foreground="#000000")
        self.ButtonResetTuner.configure(highlightbackground="#d9d9d9")
        self.ButtonResetTuner.configure(highlightcolor="black")
        self.ButtonResetTuner.configure(pady="0")
        self.ButtonResetTuner.configure(text='''Reset''')

        self.ButtonStartStopDrone = tk.Button(self.TNotebookMode_t2)
        self.ButtonStartStopDrone.place(relx=0.03, rely=0.731, height=101
                , width=141)
        self.ButtonStartStopDrone.configure(activebackground="#f9f9f9")
        self.ButtonStartStopDrone.configure(activeforeground="black")
        self.ButtonStartStopDrone.configure(background="#d9d9d9")
        self.ButtonStartStopDrone.configure(disabledforeground="#a3a3a3")
        self.ButtonStartStopDrone.configure(foreground="#000000")
        self.ButtonStartStopDrone.configure(highlightbackground="#d9d9d9")
        self.ButtonStartStopDrone.configure(highlightcolor="black")
        self.ButtonStartStopDrone.configure(pady="0")
        self.ButtonStartStopDrone.configure(text='''Start''')

        self.LabelDroneInstructions = tk.Label(self.TNotebookMode_t2)
        self.LabelDroneInstructions.place(relx=0.00, rely=0.073, height=41
                , width=225)
        self.LabelDroneInstructions.configure(activebackground="#f9f9f9")
        self.LabelDroneInstructions.configure(activeforeground="black")
        self.LabelDroneInstructions.configure(background="#d9d9d9")
        self.LabelDroneInstructions.configure(disabledforeground="#a3a3a3")
        self.LabelDroneInstructions.configure(foreground="#000000")
        self.LabelDroneInstructions.configure(highlightbackground="#d9d9d9")
        self.LabelDroneInstructions.configure(highlightcolor="black")
        self.LabelDroneInstructions.configure(text='''Choose drone note to play,
change type of wave and
relative octave.''')

        self.FrameIncOctave = tk.Frame(self.TNotebookMode_t2)
        self.FrameIncOctave.place(relx=0.274, rely=0.731, relheight=0.239
                , relwidth=0.47)
        self.FrameIncOctave.configure(relief='groove')
        self.FrameIncOctave.configure(borderwidth="2")
        self.FrameIncOctave.configure(relief="groove")
        self.FrameIncOctave.configure(background="#d9d9d9")
        self.FrameIncOctave.configure(highlightbackground="#d9d9d9")
        self.FrameIncOctave.configure(highlightcolor="black")

        self.ButtonIncreaseOctave = tk.Button(self.FrameIncOctave)
        self.ButtonIncreaseOctave.place(relx=0.065, rely=0.18, height=71
                , width=89)
        self.ButtonIncreaseOctave.configure(activebackground="#f9f9f9")
        self.ButtonIncreaseOctave.configure(activeforeground="black")
        self.ButtonIncreaseOctave.configure(background="#d9d9d9")
        self.ButtonIncreaseOctave.configure(disabledforeground="#a3a3a3")
        self.ButtonIncreaseOctave.configure(foreground="#000000")
        self.ButtonIncreaseOctave.configure(highlightbackground="#d9d9d9")
        self.ButtonIncreaseOctave.configure(highlightcolor="black")
        self.ButtonIncreaseOctave.configure(pady="0")
        self.ButtonIncreaseOctave.configure(text='''↑''')

        self.LabelOctave = tk.Label(self.FrameIncOctave)
        self.LabelOctave.place(relx=0.68, rely=0.18, height=71, width=89)
        self.LabelOctave.configure(activebackground="#f9f9f9")
        self.LabelOctave.configure(activeforeground="black")
        self.LabelOctave.configure(background="#d9d9d9")
        self.LabelOctave.configure(disabledforeground="#a3a3a3")
        self.LabelOctave.configure(font="-family {DejaVu Sans} -size 20")
        self.LabelOctave.configure(foreground="#000000")
        self.LabelOctave.configure(highlightbackground="#d9d9d9")
        self.LabelOctave.configure(highlightcolor="black")
        self.LabelOctave.configure(text='''4''')
        self.LabelOctave.configure(textvariable=music_aid_support.octave)

        self.ButtonDecreaseOctave = tk.Button(self.FrameIncOctave)
        self.ButtonDecreaseOctave.place(relx=0.388, rely=0.18, height=71
                , width=89)
        self.ButtonDecreaseOctave.configure(activebackground="#f9f9f9")
        self.ButtonDecreaseOctave.configure(activeforeground="black")
        self.ButtonDecreaseOctave.configure(background="#d9d9d9")
        self.ButtonDecreaseOctave.configure(disabledforeground="#a3a3a3")
        self.ButtonDecreaseOctave.configure(foreground="#000000")
        self.ButtonDecreaseOctave.configure(highlightbackground="#d9d9d9")
        self.ButtonDecreaseOctave.configure(highlightcolor="black")
        self.ButtonDecreaseOctave.configure(pady="0")
        self.ButtonDecreaseOctave.configure(text='''↓''')

        self.FrameEnterNote = tk.Frame(self.TNotebookMode_t2)
        self.FrameEnterNote.place(relx=0.03, rely=0.250, relheight=0.402
                , relwidth=0.904)
        self.FrameEnterNote.configure(relief='groove')
        self.FrameEnterNote.configure(borderwidth="2")
        self.FrameEnterNote.configure(relief="groove")
        self.FrameEnterNote.configure(background="#d9d9d9")
        self.FrameEnterNote.configure(highlightbackground="#d9d9d9")
        self.FrameEnterNote.configure(highlightcolor="black")

        self.ButtonEnterFreqC = tk.Button(self.FrameEnterNote)
        self.ButtonEnterFreqC.place(relx=0.034, rely=0.093, height=71, width=71)
        self.ButtonEnterFreqC.configure(activebackground="#f9f9f9")
        self.ButtonEnterFreqC.configure(activeforeground="black")
        self.ButtonEnterFreqC.configure(background="#d9d9d9")
        self.ButtonEnterFreqC.configure(disabledforeground="#a3a3a3")
        self.ButtonEnterFreqC.configure(foreground="#000000")
        self.ButtonEnterFreqC.configure(highlightbackground="#d9d9d9")
        self.ButtonEnterFreqC.configure(highlightcolor="black")
        self.ButtonEnterFreqC.configure(pady="0")
        self.ButtonEnterFreqC.configure(text='''C''')
        self.ButtonEnterFreqC.configure(relief='sunken')

        self.ButtonEnterFreqD = tk.Button(self.FrameEnterNote)
        self.ButtonEnterFreqD.place(relx=0.168, rely=0.093, height=71, width=71)
        self.ButtonEnterFreqD.configure(activebackground="#f9f9f9")
        self.ButtonEnterFreqD.configure(activeforeground="black")
        self.ButtonEnterFreqD.configure(background="#d9d9d9")
        self.ButtonEnterFreqD.configure(disabledforeground="#a3a3a3")
        self.ButtonEnterFreqD.configure(foreground="#000000")
        self.ButtonEnterFreqD.configure(highlightbackground="#d9d9d9")
        self.ButtonEnterFreqD.configure(highlightcolor="black")
        self.ButtonEnterFreqD.configure(pady="0")
        self.ButtonEnterFreqD.configure(text='''D''')

        self.ButtonEnterFreqE = tk.Button(self.FrameEnterNote)
        self.ButtonEnterFreqE.place(relx=0.303, rely=0.093, height=71, width=71)
        self.ButtonEnterFreqE.configure(activebackground="#f9f9f9")
        self.ButtonEnterFreqE.configure(activeforeground="black")
        self.ButtonEnterFreqE.configure(background="#d9d9d9")
        self.ButtonEnterFreqE.configure(disabledforeground="#a3a3a3")
        self.ButtonEnterFreqE.configure(foreground="#000000")
        self.ButtonEnterFreqE.configure(highlightbackground="#d9d9d9")
        self.ButtonEnterFreqE.configure(highlightcolor="black")
        self.ButtonEnterFreqE.configure(pady="0")
        self.ButtonEnterFreqE.configure(text='''E''')

        self.ButtonEnterFreqF = tk.Button(self.FrameEnterNote)
        self.ButtonEnterFreqF.place(relx=0.437, rely=0.093, height=71, width=71)
        self.ButtonEnterFreqF.configure(activebackground="#f9f9f9")
        self.ButtonEnterFreqF.configure(activeforeground="black")
        self.ButtonEnterFreqF.configure(background="#d9d9d9")
        self.ButtonEnterFreqF.configure(disabledforeground="#a3a3a3")
        self.ButtonEnterFreqF.configure(foreground="#000000")
        self.ButtonEnterFreqF.configure(highlightbackground="#d9d9d9")
        self.ButtonEnterFreqF.configure(highlightcolor="black")
        self.ButtonEnterFreqF.configure(pady="0")
        self.ButtonEnterFreqF.configure(text='''F''')

        self.ButtonEnterFreqG = tk.Button(self.FrameEnterNote)
        self.ButtonEnterFreqG.place(relx=0.571, rely=0.093, height=71, width=71)
        self.ButtonEnterFreqG.configure(activebackground="#f9f9f9")
        self.ButtonEnterFreqG.configure(activeforeground="black")
        self.ButtonEnterFreqG.configure(background="#d9d9d9")
        self.ButtonEnterFreqG.configure(disabledforeground="#a3a3a3")
        self.ButtonEnterFreqG.configure(foreground="#000000")
        self.ButtonEnterFreqG.configure(highlightbackground="#d9d9d9")
        self.ButtonEnterFreqG.configure(highlightcolor="black")
        self.ButtonEnterFreqG.configure(pady="0")
        self.ButtonEnterFreqG.configure(text='''G''')

        self.ButtonEnterFreqA = tk.Button(self.FrameEnterNote)
        self.ButtonEnterFreqA.place(relx=0.706, rely=0.093, height=71, width=71)
        self.ButtonEnterFreqA.configure(activebackground="#f9f9f9")
        self.ButtonEnterFreqA.configure(activeforeground="black")
        self.ButtonEnterFreqA.configure(background="#d9d9d9")
        self.ButtonEnterFreqA.configure(disabledforeground="#a3a3a3")
        self.ButtonEnterFreqA.configure(foreground="#000000")
        self.ButtonEnterFreqA.configure(highlightbackground="#d9d9d9")
        self.ButtonEnterFreqA.configure(highlightcolor="black")
        self.ButtonEnterFreqA.configure(pady="0")
        self.ButtonEnterFreqA.configure(text='''A''')

        self.ButtonEnterFreqB = tk.Button(self.FrameEnterNote)
        self.ButtonEnterFreqB.place(relx=0.84, rely=0.093, height=71, width=71)
        self.ButtonEnterFreqB.configure(activebackground="#f9f9f9")
        self.ButtonEnterFreqB.configure(activeforeground="black")
        self.ButtonEnterFreqB.configure(background="#d9d9d9")
        self.ButtonEnterFreqB.configure(disabledforeground="#a3a3a3")
        self.ButtonEnterFreqB.configure(foreground="#000000")
        self.ButtonEnterFreqB.configure(highlightbackground="#d9d9d9")
        self.ButtonEnterFreqB.configure(highlightcolor="black")
        self.ButtonEnterFreqB.configure(pady="0")
        self.ButtonEnterFreqB.configure(text='''B''')

        self.ButtonEnterFreqCs = tk.Button(self.FrameEnterNote)
        self.ButtonEnterFreqCs.place(relx=0.101, rely=0.540, height=71, width=71)

        self.ButtonEnterFreqCs.configure(activebackground="#f9f9f9")
        self.ButtonEnterFreqCs.configure(activeforeground="black")
        self.ButtonEnterFreqCs.configure(background="#d9d9d9")
        self.ButtonEnterFreqCs.configure(disabledforeground="#a3a3a3")
        self.ButtonEnterFreqCs.configure(foreground="#000000")
        self.ButtonEnterFreqCs.configure(highlightbackground="#d9d9d9")
        self.ButtonEnterFreqCs.configure(highlightcolor="black")
        self.ButtonEnterFreqCs.configure(pady="0")
        self.ButtonEnterFreqCs.configure(text='''C#''')

        self.ButtonEnterFreqDs = tk.Button(self.FrameEnterNote)
        self.ButtonEnterFreqDs.place(relx=0.235, rely=0.540, height=71, width=71)

        self.ButtonEnterFreqDs.configure(activebackground="#f9f9f9")
        self.ButtonEnterFreqDs.configure(activeforeground="black")
        self.ButtonEnterFreqDs.configure(background="#d9d9d9")
        self.ButtonEnterFreqDs.configure(disabledforeground="#a3a3a3")
        self.ButtonEnterFreqDs.configure(foreground="#000000")
        self.ButtonEnterFreqDs.configure(highlightbackground="#d9d9d9")
        self.ButtonEnterFreqDs.configure(highlightcolor="black")
        self.ButtonEnterFreqDs.configure(pady="0")
        self.ButtonEnterFreqDs.configure(text='''D#''')

        self.ButtonEnterFreqAs = tk.Button(self.FrameEnterNote)
        self.ButtonEnterFreqAs.place(relx=0.773, rely=0.540, height=71, width=71)

        self.ButtonEnterFreqAs.configure(activebackground="#f9f9f9")
        self.ButtonEnterFreqAs.configure(activeforeground="black")
        self.ButtonEnterFreqAs.configure(background="#d9d9d9")
        self.ButtonEnterFreqAs.configure(disabledforeground="#a3a3a3")
        self.ButtonEnterFreqAs.configure(foreground="#000000")
        self.ButtonEnterFreqAs.configure(highlightbackground="#d9d9d9")
        self.ButtonEnterFreqAs.configure(highlightcolor="black")
        self.ButtonEnterFreqAs.configure(pady="0")
        self.ButtonEnterFreqAs.configure(text='''A#''')

        self.ButtonEnterFreqGs = tk.Button(self.FrameEnterNote)
        self.ButtonEnterFreqGs.place(relx=0.639, rely=0.540, height=71, width=71)

        self.ButtonEnterFreqGs.configure(activebackground="#f9f9f9")
        self.ButtonEnterFreqGs.configure(activeforeground="black")
        self.ButtonEnterFreqGs.configure(background="#d9d9d9")
        self.ButtonEnterFreqGs.configure(disabledforeground="#a3a3a3")
        self.ButtonEnterFreqGs.configure(foreground="#000000")
        self.ButtonEnterFreqGs.configure(highlightbackground="#d9d9d9")
        self.ButtonEnterFreqGs.configure(highlightcolor="black")
        self.ButtonEnterFreqGs.configure(pady="0")
        self.ButtonEnterFreqGs.configure(text='''G#''')

        self.ButtonEnterFreqFs = tk.Button(self.FrameEnterNote)
        self.ButtonEnterFreqFs.place(relx=0.504, rely=0.540, height=71, width=71)

        self.ButtonEnterFreqFs.configure(activebackground="#f9f9f9")
        self.ButtonEnterFreqFs.configure(activeforeground="black")
        self.ButtonEnterFreqFs.configure(background="#d9d9d9")
        self.ButtonEnterFreqFs.configure(disabledforeground="#a3a3a3")
        self.ButtonEnterFreqFs.configure(foreground="#000000")
        self.ButtonEnterFreqFs.configure(highlightbackground="#d9d9d9")
        self.ButtonEnterFreqFs.configure(highlightcolor="black")
        self.ButtonEnterFreqFs.configure(pady="0")
        self.ButtonEnterFreqFs.configure(text='''F#''')

        self.ButtonResetDrone = tk.Button(self.TNotebookMode_t2)
        self.ButtonResetDrone.place(relx=0.76, rely=0.731, height=103, width=136)

        self.ButtonResetDrone.configure(activebackground="#ececec")
        self.ButtonResetDrone.configure(activeforeground="#000000")
        self.ButtonResetDrone.configure(background="#d9d9d9")
        self.ButtonResetDrone.configure(disabledforeground="#a3a3a3")
        self.ButtonResetDrone.configure(foreground="#000000")
        self.ButtonResetDrone.configure(highlightbackground="#d9d9d9")
        self.ButtonResetDrone.configure(highlightcolor="black")
        self.ButtonResetDrone.configure(pady="0")
        self.ButtonResetDrone.configure(text='''Reset''')

        self.LabelIncOctave = tk.Label(self.TNotebookMode_t2)
        self.LabelIncOctave.place(relx=0.274, rely=0.667, height=26, width=212)
        self.LabelIncOctave.configure(activebackground="#f9f9f9")
        self.LabelIncOctave.configure(activeforeground="black")
        self.LabelIncOctave.configure(background="#d9d9d9")
        self.LabelIncOctave.configure(disabledforeground="#a3a3a3")
        self.LabelIncOctave.configure(foreground="#000000")
        self.LabelIncOctave.configure(highlightbackground="#d9d9d9")
        self.LabelIncOctave.configure(highlightcolor="black")
        self.LabelIncOctave.configure(text='''Increment or Decrement Octave''')

        self.LabelTitle = tk.Label(top)
        self.LabelTitle.place(relx=0.013, rely=0.017, height=81, width=609)
        self.LabelTitle.configure(activebackground="#f9f9f9")
        self.LabelTitle.configure(activeforeground="black")
        self.LabelTitle.configure(background="#d9d9d9")
        self.LabelTitle.configure(disabledforeground="#a3a3a3")
        self.LabelTitle.configure(foreground="#000000")
        self.LabelTitle.configure(highlightbackground="#d9d9d9")
        self.LabelTitle.configure(highlightcolor="black")
        self.LabelTitle.configure(text='''All in one music aid''')

        self.ScaleMetronomeVolume = tk.Scale(top, from_=100.0, to=0.0, resolution=5.0)
        self.ScaleMetronomeVolume.place(relx=0.858, rely=0.215, relwidth=0.0
                , relheight=0.759, width=49, bordermode='ignore')
        self.ScaleMetronomeVolume.configure(activebackground="#f9f9f9")
        self.ScaleMetronomeVolume.configure(background="#d9d9d9")
        self.ScaleMetronomeVolume.configure(foreground="#000000")
        self.ScaleMetronomeVolume.configure(highlightbackground="#d9d9d9")
        self.ScaleMetronomeVolume.configure(highlightcolor="black")
        self.ScaleMetronomeVolume.configure(length="456")
        self.ScaleMetronomeVolume.configure(troughcolor="#d9d9d9")
        self.ScaleMetronomeVolume.set(50)
        
        self.ScaleDroneVolume = tk.Scale(top, from_=100.0, to=0.0, resolution=5.0)
        self.ScaleDroneVolume.place(relx=0.921, rely=0.215, relwidth=0.0
                , relheight=0.759, width=49, bordermode='ignore')
        self.ScaleDroneVolume.configure(activebackground="#f9f9f9")
        self.ScaleDroneVolume.configure(background="#d9d9d9")
        self.ScaleDroneVolume.configure(foreground="#000000")
        self.ScaleDroneVolume.configure(highlightbackground="#d9d9d9")
        self.ScaleDroneVolume.configure(highlightcolor="black")
        self.ScaleDroneVolume.configure(length="456")
        self.ScaleDroneVolume.configure(troughcolor="#d9d9d9")
        self.ScaleDroneVolume.set(50)

        self.ButtonResetAll = tk.Button(top)
        self.ButtonResetAll.place(relx=0.794, rely=0.033, height=83, width=146)
        self.ButtonResetAll.configure(activebackground="#ececec")
        self.ButtonResetAll.configure(activeforeground="#000000")
        self.ButtonResetAll.configure(background="#d9d9d9")
        self.ButtonResetAll.configure(disabledforeground="#a3a3a3")
        self.ButtonResetAll.configure(foreground="#000000")
        self.ButtonResetAll.configure(highlightbackground="#d9d9d9")
        self.ButtonResetAll.configure(highlightcolor="black")
        self.ButtonResetAll.configure(pady="0")
        self.ButtonResetAll.configure(text='''Reset All''')

        self.ScaleDroneSharps = tk.Scale(self.TNotebookMode_t2, from_=1.0, to=0.0)
        self.ScaleDroneSharps.place(relx=0.800, rely=0.677, relwidth=0.101
                , relheight=0.0, height=21, bordermode='ignore')
        self.ScaleDroneSharps.configure(activebackground="#f9f9f9")
        self.ScaleDroneSharps.configure(background="#d9d9d9")
        self.ScaleDroneSharps.configure(foreground="#000000")
        self.ScaleDroneSharps.configure(highlightbackground="#d9d9d9")
        self.ScaleDroneSharps.configure(highlightcolor="black")
        self.ScaleDroneSharps.configure(orient="horizontal")
        self.ScaleDroneSharps.configure(showvalue="0")
        self.ScaleDroneSharps.configure(troughcolor="#d9d9d9")
        self.ScaleDroneSharps.set(1)

        self.FrameDroneMode = tk.Frame(self.TNotebookMode_t2)
        self.FrameDroneMode.place(relx=0.340, rely=0.000, relheight=0.220
                , relwidth=0.658)
        self.FrameDroneMode.configure(relief='groove')
        self.FrameDroneMode.configure(borderwidth="2")
        self.FrameDroneMode.configure(relief='groove')
        self.FrameDroneMode.configure(background="#d9d9d9")
        self.FrameDroneMode.configure(width=395)

        self.ButtonDroneSaw = tk.Button(self.FrameDroneMode)
        self.ButtonDroneSaw.place(relx=0.051, rely=0.127, height=74, width=77)
        self.ButtonDroneSaw.configure(activebackground="#d9d9d9")
        self.ButtonDroneSaw.configure(activeforeground="#000000")
        self.ButtonDroneSaw.configure(background="#d9d9d9")
        self.ButtonDroneSaw.configure(disabledforeground="#a3a3a3")
        self.ButtonDroneSaw.configure(foreground="#000000")
        self.ButtonDroneSaw.configure(highlightbackground="#d9d9d9")
        self.ButtonDroneSaw.configure(highlightcolor="black")
        self.ButtonDroneSaw.configure(pady="0")
        self.ButtonDroneSaw.configure(text='''Saw''')
        self.ButtonDroneSaw.configure(width=71)

        self.ButtonDroneSine = tk.Button(self.FrameDroneMode)
        self.ButtonDroneSine.place(relx=0.278, rely=0.127, height=74, width=77)
        self.ButtonDroneSine.configure(relief='sunken')
        self.ButtonDroneSine.configure(activebackground="#d9d9d9")
        self.ButtonDroneSine.configure(activeforeground="#000000")
        self.ButtonDroneSine.configure(background="#d9d9d9")
        self.ButtonDroneSine.configure(disabledforeground="#a3a3a3")
        self.ButtonDroneSine.configure(foreground="#000000")
        self.ButtonDroneSine.configure(highlightbackground="#d9d9d9")
        self.ButtonDroneSine.configure(highlightcolor="black")
        self.ButtonDroneSine.configure(pady="0")
        self.ButtonDroneSine.configure(text='''Sine''')
        self.ButtonDroneSine.configure(width=71)

        self.ButtonDroneSquare = tk.Button(self.FrameDroneMode)
        self.ButtonDroneSquare.place(relx=0.506, rely=0.127, height=74, width=77)

        self.ButtonDroneSquare.configure(activebackground="#d9d9d9")
        self.ButtonDroneSquare.configure(activeforeground="#000000")
        self.ButtonDroneSquare.configure(background="#d9d9d9")
        self.ButtonDroneSquare.configure(disabledforeground="#a3a3a3")
        self.ButtonDroneSquare.configure(foreground="#000000")
        self.ButtonDroneSquare.configure(highlightbackground="#d9d9d9")
        self.ButtonDroneSquare.configure(highlightcolor="black")
        self.ButtonDroneSquare.configure(pady="0")
        self.ButtonDroneSquare.configure(text='''Square''')
        self.ButtonDroneSquare.configure(width=71)

        self.ButtonDroneTriangle = tk.Button(self.FrameDroneMode)
        self.ButtonDroneTriangle.place(relx=0.734, rely=0.127, height=74
                , width=77)
        self.ButtonDroneTriangle.configure(activebackground="#d9d9d9")
        self.ButtonDroneTriangle.configure(activeforeground="#000000")
        self.ButtonDroneTriangle.configure(background="#d9d9d9")
        self.ButtonDroneTriangle.configure(disabledforeground="#a3a3a3")
        self.ButtonDroneTriangle.configure(foreground="#000000")
        self.ButtonDroneTriangle.configure(highlightbackground="#d9d9d9")
        self.ButtonDroneTriangle.configure(highlightcolor="black")
        self.ButtonDroneTriangle.configure(pady="0")
        self.ButtonDroneTriangle.configure(text='''Triangle''')
        self.ButtonDroneTriangle.configure(width=71)

        # END PAGE-GENERATED DESIGNER

        
        # function changes current wave type in drone tab and changes button relief to indicate user input
        def curWave(wave):
            self.ButtonDroneSaw.configure(relief='raised')
            self.ButtonDroneSine.configure(relief='raised')
            self.ButtonDroneSquare.configure(relief='raised')
            self.ButtonDroneTriangle.configure(relief='raised')
            wave.configure(relief='sunken')
            music_aid_support.sumbitWave(wave['text'])

        # function changes cyrrent note in drone tab and changes button relief to indicate to user
        def curNote(note):
            self.ButtonEnterFreqC.configure(relief='raised')
            self.ButtonEnterFreqD.configure(relief='raised')
            self.ButtonEnterFreqE.configure(relief='raised')
            self.ButtonEnterFreqF.configure(relief='raised')
            self.ButtonEnterFreqG.configure(relief='raised')
            self.ButtonEnterFreqA.configure(relief='raised')
            self.ButtonEnterFreqB.configure(relief='raised')
            self.ButtonEnterFreqCs.configure(relief='raised')
            self.ButtonEnterFreqDs.configure(relief='raised')
            self.ButtonEnterFreqAs.configure(relief='raised')
            self.ButtonEnterFreqGs.configure(relief='raised')
            self.ButtonEnterFreqFs.configure(relief='raised')
            if note is not None:
                note.configure(relief='sunken')
                music_aid_support.sumbitNote(note['text'])
            
        
        # attatch wave type buttons click command to change current wave type to own wave
        self.ButtonDroneSaw.configure(command=lambda:curWave(self.ButtonDroneSaw))
        self.ButtonDroneSine.configure(command=lambda:curWave(self.ButtonDroneSine))
        self.ButtonDroneSquare.configure(command=lambda:curWave(self.ButtonDroneSquare))
        self.ButtonDroneTriangle.configure(command=lambda:curWave(self.ButtonDroneTriangle))

            
        # attatch note buttons click commands to change current note to its own note
        self.ButtonEnterFreqC.configure(command=lambda:curNote(self.ButtonEnterFreqC))
        self.ButtonEnterFreqD.configure(command=lambda:curNote(self.ButtonEnterFreqD))
        self.ButtonEnterFreqE.configure(command=lambda:curNote(self.ButtonEnterFreqE))
        self.ButtonEnterFreqF.configure(command=lambda:curNote(self.ButtonEnterFreqF))
        self.ButtonEnterFreqG.configure(command=lambda:curNote(self.ButtonEnterFreqG))
        self.ButtonEnterFreqA.configure(command=lambda:curNote(self.ButtonEnterFreqA))
        self.ButtonEnterFreqB.configure(command=lambda:curNote(self.ButtonEnterFreqB))
        self.ButtonEnterFreqCs.configure(command=lambda:curNote(self.ButtonEnterFreqCs))
        self.ButtonEnterFreqDs.configure(command=lambda:curNote(self.ButtonEnterFreqDs))
        self.ButtonEnterFreqAs.configure(command=lambda:curNote(self.ButtonEnterFreqAs))
        self.ButtonEnterFreqGs.configure(command=lambda:curNote(self.ButtonEnterFreqGs))
        self.ButtonEnterFreqFs.configure(command=lambda:curNote(self.ButtonEnterFreqFs))

        
        # bpm button keypad changes textbox current string, append own number as string to end of text variable
        self.ButtonEnterBPM1.configure(command=lambda:self.TextEnterBPM.insert('end-1c', self.ButtonEnterBPM1['text']))
        self.ButtonEnterBPM2.configure(command=lambda:self.TextEnterBPM.insert('end-1c', self.ButtonEnterBPM2['text']))
        self.ButtonEnterBPM3.configure(command=lambda:self.TextEnterBPM.insert('end-1c', self.ButtonEnterBPM3['text']))
        self.ButtonEnterBPM4.configure(command=lambda:self.TextEnterBPM.insert('end-1c', self.ButtonEnterBPM4['text']))
        self.ButtonEnterBPM5.configure(command=lambda:self.TextEnterBPM.insert('end-1c', self.ButtonEnterBPM5['text']))
        self.ButtonEnterBPM6.configure(command=lambda:self.TextEnterBPM.insert('end-1c', self.ButtonEnterBPM6['text']))
        self.ButtonEnterBPM7.configure(command=lambda:self.TextEnterBPM.insert('end-1c', self.ButtonEnterBPM7['text']))
        self.ButtonEnterBPM8.configure(command=lambda:self.TextEnterBPM.insert('end-1c', self.ButtonEnterBPM8['text']))
        self.ButtonEnterBPM9.configure(command=lambda:self.TextEnterBPM.insert('end-1c', self.ButtonEnterBPM9['text']))
        self.ButtonEnterBPM0.configure(command=lambda:self.TextEnterBPM.insert('end-1c', self.ButtonEnterBPM0['text']))
        # delete last string in tk text box string variable
        self.ButtonEnterBPMDelete.configure(command=lambda: self.TextEnterBPM.delete('end-2c'))

        # volume slider (scale) on change command submit volume  
        self.ScaleMetronomeVolume.configure(command= music_aid_support.sumbitMV)
        self.ScaleDroneVolume.configure(command= music_aid_support.sumbitDV)

        # lambda function has list of two functions which submit BPM (check text not null) and clear text
        self.ButtonEnterBPM.configure(command=lambda: [ None if not self.TextEnterBPM.get("1.0",'end-1c').isdigit() else music_aid_support.submitBPM(int(self.TextEnterBPM.get("1.0",'end-1c'))), self.TextEnterBPM.delete(1.0, tk.END) ])

        # increment or decrement bpm, freq (hz), or octave integers on click of button command
        self.ButtonIncreaseBPM.configure(command=lambda: music_aid_support.submitBPM(int(music_aid_support.bpm.get()) + 1))
        self.ButtonDecreaseBPM.configure(command=lambda: music_aid_support.submitBPM(int(music_aid_support.bpm.get()) - 1))
        self.ButtonIncreaseFrequency.configure(command=lambda: music_aid_support.sumbitHZ(int(music_aid_support.hz.get()) + 1))
        self.ButtonDecreaseFrequency.configure(command=lambda: music_aid_support.sumbitHZ(int(music_aid_support.hz.get()) - 1))
        # restrict octave to range, only inc/dec if will be within range
        self.ButtonIncreaseOctave.configure(command=lambda: None if int(music_aid_support.octave.get()) >= 7 else music_aid_support.sumbitOctave(int(music_aid_support.octave.get()) + 1))
        self.ButtonDecreaseOctave.configure(command=lambda: None if int(music_aid_support.octave.get()) <= 1 else music_aid_support.sumbitOctave(int(music_aid_support.octave.get()) - 1))

        # start or stop buttons will toggle the state of their respective mode and send the new state
        
        def disableNonM():
            music_aid_support.tuner = False
            self.ButtonStartStopTuner.config(text = "Start")
            music_aid_support.drone = False
            self.ButtonStartStopDrone.config(text = "Start")
        def disableNonT():
            music_aid_support.drone = False
            self.ButtonStartStopDrone.config(text = "Start")
            music_aid_support.metronome = False
            self.ButtonStartStopMetronome.config(text = "Start")
        def disableNonD():
            music_aid_support.tuner = False
            self.ButtonStartStopTuner.config(text = "Start")
            music_aid_support.metronome = False
            self.ButtonStartStopMetronome.config(text = "Start")
            
        self.ButtonStartStopMetronome.configure(command=lambda: [self.ButtonStartStopMetronome.config(text = ("Stop" if music_aid_support.toggleMetronome() else "Start")), None if not music_aid_support.metronome else disableNonM()])
        self.ButtonStartStopTuner.configure(command=lambda: [self.ButtonStartStopTuner.config(text = ("Stop" if music_aid_support.toggleTuner() else "Start")), None if not music_aid_support.tuner else disableNonT()])
        self.ButtonStartStopDrone.configure(command=lambda: [self.ButtonStartStopDrone.config(text = ("Stop" if music_aid_support.toggleDrone() else "Start")), None if not music_aid_support.drone else disableNonD()])


        # reset volume sliders and values, send new values
        def resetV():
            self.ScaleMetronomeVolume.set(50)
            music_aid_support.sumbitMV(50)
            self.ScaleDroneVolume.set(50)
            music_aid_support.sumbitDV(50)

        # reset all elements in metronome tab to their defaults and send
        def resetM():
            music_aid_support.submitBPM(90)
            self.TextEnterBPM.delete(1.0, tk.END)
            if music_aid_support.metronome:
                music_aid_support.toggleMetronome()
                self.ButtonStartStopMetronome.config(text = "Start")
            self.ComboboxBeats.current(0)
            sendBeats(0)

        # reset all elements in tuner tab to their defaults and send
        def resetT():
            music_aid_support.sumbitHZ(440)
            self.ScaleTunerSharps.set(1)
            if music_aid_support.tuner:
                music_aid_support.toggleTuner()
                self.ButtonStartStopTuner.config(text = "Start")

        # reset all elements in drone tab to their defaults and send
        def resetD():
            music_aid_support.sumbitOctave(4)
            music_aid_support.sumbitNote(None)
            if self.ScaleDroneSharps.get() == 0:
                self.ScaleDroneSharps.set(1)
            curNote(self.ButtonEnterFreqC)
            curWave(self.ButtonDroneSine)
            if music_aid_support.drone:
                music_aid_support.toggleDrone()
                self.ButtonStartStopDrone.config(text = "Start")

        # additional function to circumvent button command (not lambda) sending button self as parameter unecessarily
        def sendBeats(n):
            music_aid_support.submitBeats(self.ComboboxBeats.get())
            
        self.ComboboxBeats.bind("<<ComboboxSelected>>", sendBeats)
        
        # attatch reset buttons on click to call their respective reset functions
        self.ButtonResetMetronome.configure(command=lambda: resetM())
        self.ButtonResetTuner.configure(command=lambda: resetT())
        self.ButtonResetDrone.configure(command=lambda: resetD())
        
        # reset all master button will invoke all other reset buttons
        self.ButtonResetAll.configure(command=lambda: [music_aid_support.send('Reset All'), self.ButtonResetMetronome.invoke(), self.ButtonResetTuner.invoke(), self.ButtonResetDrone.invoke(), resetV()])

        # toggle sharps or flats (manual since easier than a systematic change because there is not much correlation)
        def droneSharpsFlats(n):
            if self.ButtonEnterFreqCs['text'][1] == "#":
                self.ButtonEnterFreqCs.configure(text='Db')
                self.ButtonEnterFreqDs.configure(text='Eb')
                self.ButtonEnterFreqAs.configure(text='Bb')
                self.ButtonEnterFreqGs.configure(text='Ab')
                self.ButtonEnterFreqFs.configure(text='Gb')
            else:
                self.ButtonEnterFreqCs.configure(text='C#')
                self.ButtonEnterFreqDs.configure(text='D#')
                self.ButtonEnterFreqAs.configure(text='A#')
                self.ButtonEnterFreqGs.configure(text='G#')
                self.ButtonEnterFreqFs.configure(text='F#')
            music_aid_support.droneSharps(n)
                    

        self.ScaleTunerSharps.configure(command=music_aid_support.tunerSharps)
        self.ScaleDroneSharps.configure(command=droneSharpsFlats)
        



# finally, check if the music_aid.py file is being run from another file or being run from itself, calls the start function
if __name__ == '__main__':
    music_aid_support.send('Serial Ready')
    vp_start_gui()
